!function(t){t.address=function(){var e,r,n=function(e){var r=t.extend(t.Event(e),function(){for(var e={},r=t.address.parameterNames(),n=0,a=r.length;n<a;n++)e[r[n]]=t.address.parameter(r[n]);return{value:t.address.value(),path:t.address.path(),pathNames:t.address.pathNames(),parameterNames:r,parameters:e,queryString:t.address.queryString()}}.call(t.address));return t(t.address).trigger(r),r},a=function(t){return Array.prototype.slice.call(t)},i=function(e,r,n){return t().bind.apply(t(t.address),Array.prototype.slice.call(arguments)),t.address},s=function(e,r){return t().unbind.apply(t(t.address),Array.prototype.slice.call(arguments)),t.address},o=function(){return B.pushState&&F.state!==e},c=function(){return("/"+P.pathname.replace(new RegExp(F.state),"")+P.search+(u()?"#"+u():"")).replace(K,"/")},u=function(){var t=P.href.indexOf("#");return t!=-1?P.href.substr(t+1):""},d=function(){return o()?c():u()},l=function(){try{return top.document!==e&&top.document.title!==e&&top.jQuery!==e&&top.jQuery.address!==e&&top.jQuery.address.frames()!==!1?top:window}catch(t){return window}},p=function(){return"javascript"},h=function(t){return t=t.toString(),(F.strict&&"/"!=t.substr(0,1)?"/":"")+t},f=function(t,e){return parseInt(t.css(e),10)},v=function(){if(!Y){var t=d(),e=decodeURI(rt)!=decodeURI(t);e&&(W&&C<7?P.reload():(W&&!H&&F.history&&D(y,50),rt=t,g(O)))}},g=function(t){return D(m,10),n(A).isDefaultPrevented()||n(t?q:N).isDefaultPrevented()},m=function(){if("null"!==F.tracker&&F.tracker!==I){var r=t.isFunction(F.tracker)?F.tracker:_[F.tracker],n=(P.pathname+P.search+(t.address&&!o()?t.address.value():"")).replace(/\/\//,"/").replace(/^\/$/,"");t.isFunction(r)?r(n):(t.isFunction(_.urchinTracker)&&_.urchinTracker(n),_.pageTracker!==e&&t.isFunction(_.pageTracker._trackPageview)&&_.pageTracker._trackPageview(n),_._gaq!==e&&t.isFunction(_._gaq.push)&&_._gaq.push(["_trackPageview",decodeURI(n)]),t.isFunction(_.ga)&&_.ga("send","pageview",n))}},y=function(){var t=p()+":"+O+";document.open();document.writeln('<html><head><title>"+z.title.replace(/\'/g,"\\'")+"</title><script>var "+U+' = "'+encodeURIComponent(d()).replace(/\'/g,"\\'")+(z.domain!=P.hostname?'";document.domain="'+z.domain:"")+"\";</script></head></html>');document.close();";C<7?r.src=t:r.contentWindow.location.replace(t)},w=function(){if(J&&V!=-1){var t,e,r=J.substr(V+1).split("&");for(t=0;t<r.length;t++)e=r[t].split("="),/^(autoUpdate|history|strict|wrap)$/.test(e[0])&&(F[e[0]]=isNaN(e[1])?/^(true|yes)$/i.test(e[1]):0!==parseInt(e[1],10)),/^(state|tracker)$/.test(e[0])&&(F[e[0]]=e[1]);J=I}rt=d()},b=function(){if(!Z){if(Z=$,w(),t('a[rel*="address:"]').address(),F.wrap){var a=t("body");t("body > *").wrapAll('<div style="padding:'+(f(a,"marginTop")+f(a,"paddingTop"))+"px "+(f(a,"marginRight")+f(a,"paddingRight"))+"px "+(f(a,"marginBottom")+f(a,"paddingBottom"))+"px "+(f(a,"marginLeft")+f(a,"paddingLeft"))+'px;" />').parent().wrap('<div id="'+U+'" style="height:100%;overflow:auto;position:relative;'+(M&&!window.statusbar.visible?"resize:both;":"")+'" />');t("html, body").css({height:"100%",margin:0,padding:0,overflow:"hidden"}),M&&t('<style type="text/css" />').appendTo("head").text("#"+U+"::-webkit-resizer { background-color: #fff; }")}if(W&&!H){var i=z.getElementsByTagName("frameset")[0];r=z.createElement((i?"":"i")+"frame"),r.src=p()+":"+O,i?(i.insertAdjacentElement("beforeEnd",r),i[i.cols?"cols":"rows"]+=",0",r.noResize=$,r.frameBorder=r.frameSpacing=0):(r.style.display="none",r.style.width=r.style.height=0,r.tabIndex=-1,z.body.insertAdjacentElement("afterBegin",r)),D(function(){t(r).bind("load",function(){var t=r.contentWindow;rt=t[U]!==e?t[U]:"",rt!=d()&&(g(O),P.hash=rt)}),r.contentWindow[U]===e&&y()},50)}D(function(){n("init"),g(O)},1),o()||(W&&C>7||!W&&H?_.addEventListener?_.addEventListener(R,v,O):_.attachEvent&&_.attachEvent("on"+R,v):Q(v,50)),"state"in window.history&&t(window).trigger("popstate")}},x=function(){decodeURI(rt)!=decodeURI(d())&&(rt=d(),g(O))},k=function(){_.removeEventListener?_.removeEventListener(R,v,O):_.detachEvent&&_.detachEvent("on"+R,v)},E=function(t){t=t.toLowerCase();var e=/(chrome)[ \/]([\w.]+)/.exec(t)||/(webkit)[ \/]([\w.]+)/.exec(t)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(t)||/(msie) ([\w.]+)/.exec(t)||t.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t)||[];return{browser:e[1]||"",version:e[2]||"0"}},S=function(){var t={},e=E(navigator.userAgent);return e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),t},I=null,U="jQueryAddress",j="string",R="hashchange",T="init",A="change",q="internalChange",N="externalChange",$=!0,O=!1,F={autoUpdate:$,history:$,strict:$,frames:$,wrap:O},L=S(),C=parseFloat(L.version),M=L.webkit||L.safari,W=L.msie,_=l(),z=_.document,B=_.history,P=_.location,Q=setInterval,D=setTimeout,K=/\/{2,9}/g,G=navigator.userAgent,H="on"+R in _,J=t("script:last").attr("src"),V=J?J.indexOf("?"):-1,X=z.title,Y=O,Z=O,tt=$,et=O,rt=d();if(W){C=parseFloat(G.substr(G.indexOf("MSIE")+4)),z.documentMode&&z.documentMode!=C&&(C=8!=z.documentMode?7:8);var nt=z.onpropertychange;z.onpropertychange=function(){nt&&nt.call(z),z.title!=X&&z.title.indexOf("#"+d())!=-1&&(z.title=X)}}if(B.navigationMode&&(B.navigationMode="compatible"),"complete"==document.readyState)var at=setInterval(function(){t.address&&(b(),clearInterval(at))},50);else w(),t(b);return t(window).bind("popstate",x).bind("unload",k),{bind:function(t,e,r){return i.apply(this,a(arguments))},unbind:function(t,e){return s.apply(this,a(arguments))},init:function(t,e){return i.apply(this,[T].concat(a(arguments)))},change:function(t,e){return i.apply(this,[A].concat(a(arguments)))},internalChange:function(t,e){return i.apply(this,[q].concat(a(arguments)))},externalChange:function(t,e){return i.apply(this,[N].concat(a(arguments)))},baseURL:function(){var t=P.href;return t.indexOf("#")!=-1&&(t=t.substr(0,t.indexOf("#"))),/\/$/.test(t)&&(t=t.substr(0,t.length-1)),t},autoUpdate:function(t){return t!==e?(F.autoUpdate=t,this):F.autoUpdate},history:function(t){return t!==e?(F.history=t,this):F.history},state:function(t){if(t!==e){F.state=t;var r=c();return F.state!==e&&(B.pushState?"/#/"==r.substr(0,3)&&P.replace(F.state.replace(/^\/$/,"")+r.substr(2)):"/"!=r&&r.replace(/^\/#/,"")!=u()&&D(function(){P.replace(F.state.replace(/^\/$/,"")+"/#"+r)},1)),this}return F.state},frames:function(t){return t!==e?(F.frames=t,_=l(),this):F.frames},strict:function(t){return t!==e?(F.strict=t,this):F.strict},tracker:function(t){return t!==e?(F.tracker=t,this):F.tracker},wrap:function(t){return t!==e?(F.wrap=t,this):F.wrap},update:function(){return et=$,this.value(rt),et=O,this},title:function(t){return t!==e?(D(function(){X=z.title=t,tt&&r&&r.contentWindow&&r.contentWindow.document&&(r.contentWindow.document.title=t,tt=O)},50),this):z.title},value:function(t){if(t!==e){if(t=h(t),"/"==t&&(t=""),rt==t&&!et)return;if(rt=t,F.autoUpdate||et){if(g($))return this;o()?B[F.history?"pushState":"replaceState"]({},"",F.state.replace(/\/$/,"")+(""===rt?"/":rt)):(Y=$,M?F.history?P.hash="#"+rt:P.replace("#"+rt):rt!=d()&&(F.history?P.hash="#"+rt:P.replace("#"+rt)),W&&!H&&F.history&&D(y,50),M?D(function(){Y=O},1):Y=O)}return this}return h(rt)},path:function(t){if(t!==e){var r=this.queryString(),n=this.hash();return this.value(t+(r?"?"+r:"")+(n?"#"+n:"")),this}return h(rt).split("#")[0].split("?")[0]},pathNames:function(){var t=this.path(),e=t.replace(K,"/").split("/");return"/"!=t.substr(0,1)&&0!==t.length||e.splice(0,1),"/"==t.substr(t.length-1,1)&&e.splice(e.length-1,1),e},queryString:function(t){if(t!==e){var r=this.hash();return this.value(this.path()+(t?"?"+t:"")+(r?"#"+r:"")),this}var n=rt.split("?");return n.slice(1,n.length).join("?").split("#")[0]},parameter:function(r,n,a){var i,s;if(n!==e){var o=this.parameterNames();for(s=[],n=n===e||n===I?"":n.toString(),i=0;i<o.length;i++){var c=o[i],u=this.parameter(c);typeof u==j&&(u=[u]),c==r&&(u=n===I||""===n?[]:a?u.concat([n]):[n]);for(var d=0;d<u.length;d++)s.push(c+"="+u[d])}return t.inArray(r,o)==-1&&n!==I&&""!==n&&s.push(r+"="+n),this.queryString(s.join("&")),this}if(n=this.queryString()){var l=[];for(s=n.split("&"),i=0;i<s.length;i++){var p=s[i].split("=");p[0]==r&&l.push(p.slice(1).join("="))}if(0!==l.length)return 1!=l.length?l:l[0]}},parameterNames:function(){var e=this.queryString(),r=[];if(e&&e.indexOf("=")!=-1)for(var n=e.split("&"),a=0;a<n.length;a++){var i=n[a].split("=")[0];t.inArray(i,r)==-1&&r.push(i)}return r},hash:function(t){if(t!==e)return this.value(rt.split("#")[0]+(t?"#"+t:"")),this;var r=rt.split("#");return r.slice(1,r.length).join("#")}}}(),t.fn.address=function(e){return t(this).each(function(r){t(this).data("address")||t(this).on("click",function(r){if(r.shiftKey||r.ctrlKey||r.metaKey||2==r.which)return!0;var n=r.currentTarget;if(t(n).is("a")){r.preventDefault();var a=e?e.call(n):/address:/.test(t(n).attr("rel"))?t(n).attr("rel").split("address:")[1].split(" ")[0]:void 0===t.address.state()||/^\/?$/.test(t.address.state())?t(n).attr("href").replace(/^(#\!?|\.)/,""):t(n).attr("href").replace(new RegExp("^(.*"+t.address.state()+"|\\.)"),"");t.address.value(a)}}).on("submit",function(r){var n=r.currentTarget;if(t(n).is("form")){r.preventDefault();var a=t(n).attr("action"),i=e?e.call(n):(a.indexOf("?")!=-1?a.replace(/&$/,""):a+"?")+t(n).serialize();t.address.value(i)}}).data("address",!0)}),this}}(jQuery);
//# sourceMappingURL=data:application/json;base64,

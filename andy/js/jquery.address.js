!function(t){t.address=function(){var e,r,n=function(e){var r=t.extend(t.Event(e),function(){for(var e={},r=t.address.parameterNames(),n=0,a=r.length;n<a;n++)e[r[n]]=t.address.parameter(r[n]);return{value:t.address.value(),path:t.address.path(),pathNames:t.address.pathNames(),parameterNames:r,parameters:e,queryString:t.address.queryString()}}.call(t.address));return t(t.address).trigger(r),r},a=function(t){return Array.prototype.slice.call(t)},i=function(e,r,n){return t().bind.apply(t(t.address),Array.prototype.slice.call(arguments)),t.address},s=function(e,r){return t().unbind.apply(t(t.address),Array.prototype.slice.call(arguments)),t.address},o=function(){return B.pushState&&F.state!==e},c=function(){return("/"+P.pathname.replace(new RegExp(F.state),"")+P.search+(u()?"#"+u():"")).replace(K,"/")},u=function(){var t=P.href.indexOf("#");return t!=-1?P.href.substr(t+1):""},d=function(){return o()?c():u()},l=function(){try{return top.document!==e&&top.document.title!==e&&top.jQuery!==e&&top.jQuery.address!==e&&top.jQuery.address.frames()!==!1?top:window}catch(t){return window}},p=function(){return"javascript"},h=function(t){return t=t.toString(),(F.strict&&"/"!=t.substr(0,1)?"/":"")+t},f=function(t,e){return parseInt(t.css(e),10)},v=function(){if(!Y){var t=d(),e=decodeURI(rt)!=decodeURI(t);e&&(W&&C<7?P.reload():(W&&!H&&F.history&&D(y,50),rt=t,g(O)))}},g=function(t){return D(m,10),n(A).isDefaultPrevented()||n(t?q:N).isDefaultPrevented()},m=function(){if("null"!==F.tracker&&F.tracker!==I){var r=t.isFunction(F.tracker)?F.tracker:_[F.tracker],n=(P.pathname+P.search+(t.address&&!o()?t.address.value():"")).replace(/\/\//,"/").replace(/^\/$/,"");t.isFunction(r)?r(n):(t.isFunction(_.urchinTracker)&&_.urchinTracker(n),_.pageTracker!==e&&t.isFunction(_.pageTracker._trackPageview)&&_.pageTracker._trackPageview(n),_._gaq!==e&&t.isFunction(_._gaq.push)&&_._gaq.push(["_trackPageview",decodeURI(n)]),t.isFunction(_.ga)&&_.ga("send","pageview",n))}},y=function(){var t=p()+":"+O+";document.open();document.writeln('<html><head><title>"+z.title.replace(/\'/g,"\\'")+"</title><script>var "+U+' = "'+encodeURIComponent(d()).replace(/\'/g,"\\'")+(z.domain!=P.hostname?'";document.domain="'+z.domain:"")+"\";</script></head></html>');document.close();";C<7?r.src=t:r.contentWindow.location.replace(t)},w=function(){if(J&&V!=-1){var t,e,r=J.substr(V+1).split("&");for(t=0;t<r.length;t++)e=r[t].split("="),/^(autoUpdate|history|strict|wrap)$/.test(e[0])&&(F[e[0]]=isNaN(e[1])?/^(true|yes)$/i.test(e[1]):0!==parseInt(e[1],10)),/^(state|tracker)$/.test(e[0])&&(F[e[0]]=e[1]);J=I}rt=d()},b=function(){if(!Z){if(Z=$,w(),t('a[rel*="address:"]').address(),F.wrap){var a=t("body");t("body > *").wrapAll('<div style="padding:'+(f(a,"marginTop")+f(a,"paddingTop"))+"px "+(f(a,"marginRight")+f(a,"paddingRight"))+"px "+(f(a,"marginBottom")+f(a,"paddingBottom"))+"px "+(f(a,"marginLeft")+f(a,"paddingLeft"))+'px;" />').parent().wrap('<div id="'+U+'" style="height:100%;overflow:auto;position:relative;'+(M&&!window.statusbar.visible?"resize:both;":"")+'" />');t("html, body").css({height:"100%",margin:0,padding:0,overflow:"hidden"}),M&&t('<style type="text/css" />').appendTo("head").text("#"+U+"::-webkit-resizer { background-color: #fff; }")}if(W&&!H){var i=z.getElementsByTagName("frameset")[0];r=z.createElement((i?"":"i")+"frame"),r.src=p()+":"+O,i?(i.insertAdjacentElement("beforeEnd",r),i[i.cols?"cols":"rows"]+=",0",r.noResize=$,r.frameBorder=r.frameSpacing=0):(r.style.display="none",r.style.width=r.style.height=0,r.tabIndex=-1,z.body.insertAdjacentElement("afterBegin",r)),D(function(){t(r).bind("load",function(){var t=r.contentWindow;rt=t[U]!==e?t[U]:"",rt!=d()&&(g(O),P.hash=rt)}),r.contentWindow[U]===e&&y()},50)}D(function(){n("init"),g(O)},1),o()||(W&&C>7||!W&&H?_.addEventListener?_.addEventListener(R,v,O):_.attachEvent&&_.attachEvent("on"+R,v):Q(v,50)),"state"in window.history&&t(window).trigger("popstate")}},x=function(){decodeURI(rt)!=decodeURI(d())&&(rt=d(),g(O))},k=function(){_.removeEventListener?_.removeEventListener(R,v,O):_.detachEvent&&_.detachEvent("on"+R,v)},E=function(t){t=t.toLowerCase();var e=/(chrome)[ \/]([\w.]+)/.exec(t)||/(webkit)[ \/]([\w.]+)/.exec(t)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(t)||/(msie) ([\w.]+)/.exec(t)||t.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t)||[];return{browser:e[1]||"",version:e[2]||"0"}},S=function(){var t={},e=E(navigator.userAgent);return e.browser&&(t[e.browser]=!0,t.version=e.version),t.chrome?t.webkit=!0:t.webkit&&(t.safari=!0),t},I=null,U="jQueryAddress",j="string",R="hashchange",T="init",A="change",q="internalChange",N="externalChange",$=!0,O=!1,F={autoUpdate:$,history:$,strict:$,frames:$,wrap:O},L=S(),C=parseFloat(L.version),M=L.webkit||L.safari,W=L.msie,_=l(),z=_.document,B=_.history,P=_.location,Q=setInterval,D=setTimeout,K=/\/{2,9}/g,G=navigator.userAgent,H="on"+R in _,J=t("script:last").attr("src"),V=J?J.indexOf("?"):-1,X=z.title,Y=O,Z=O,tt=$,et=O,rt=d();if(W){C=parseFloat(G.substr(G.indexOf("MSIE")+4)),z.documentMode&&z.documentMode!=C&&(C=8!=z.documentMode?7:8);var nt=z.onpropertychange;z.onpropertychange=function(){nt&&nt.call(z),z.title!=X&&z.title.indexOf("#"+d())!=-1&&(z.title=X)}}if(B.navigationMode&&(B.navigationMode="compatible"),"complete"==document.readyState)var at=setInterval(function(){t.address&&(b(),clearInterval(at))},50);else w(),t(b);return t(window).bind("popstate",x).bind("unload",k),{bind:function(t,e,r){return i.apply(this,a(arguments))},unbind:function(t,e){return s.apply(this,a(arguments))},init:function(t,e){return i.apply(this,[T].concat(a(arguments)))},change:function(t,e){return i.apply(this,[A].concat(a(arguments)))},internalChange:function(t,e){return i.apply(this,[q].concat(a(arguments)))},externalChange:function(t,e){return i.apply(this,[N].concat(a(arguments)))},baseURL:function(){var t=P.href;return t.indexOf("#")!=-1&&(t=t.substr(0,t.indexOf("#"))),/\/$/.test(t)&&(t=t.substr(0,t.length-1)),t},autoUpdate:function(t){return t!==e?(F.autoUpdate=t,this):F.autoUpdate},history:function(t){return t!==e?(F.history=t,this):F.history},state:function(t){if(t!==e){F.state=t;var r=c();return F.state!==e&&(B.pushState?"/#/"==r.substr(0,3)&&P.replace(F.state.replace(/^\/$/,"")+r.substr(2)):"/"!=r&&r.replace(/^\/#/,"")!=u()&&D(function(){P.replace(F.state.replace(/^\/$/,"")+"/#"+r)},1)),this}return F.state},frames:function(t){return t!==e?(F.frames=t,_=l(),this):F.frames},strict:function(t){return t!==e?(F.strict=t,this):F.strict},tracker:function(t){return t!==e?(F.tracker=t,this):F.tracker},wrap:function(t){return t!==e?(F.wrap=t,this):F.wrap},update:function(){return et=$,this.value(rt),et=O,this},title:function(t){return t!==e?(D(function(){X=z.title=t,tt&&r&&r.contentWindow&&r.contentWindow.document&&(r.contentWindow.document.title=t,tt=O)},50),this):z.title},value:function(t){if(t!==e){if(t=h(t),"/"==t&&(t=""),rt==t&&!et)return;if(rt=t,F.autoUpdate||et){if(g($))return this;o()?B[F.history?"pushState":"replaceState"]({},"",F.state.replace(/\/$/,"")+(""===rt?"/":rt)):(Y=$,M?F.history?P.hash="#"+rt:P.replace("#"+rt):rt!=d()&&(F.history?P.hash="#"+rt:P.replace("#"+rt)),W&&!H&&F.history&&D(y,50),M?D(function(){Y=O},1):Y=O)}return this}return h(rt)},path:function(t){if(t!==e){var r=this.queryString(),n=this.hash();return this.value(t+(r?"?"+r:"")+(n?"#"+n:"")),this}return h(rt).split("#")[0].split("?")[0]},pathNames:function(){var t=this.path(),e=t.replace(K,"/").split("/");return"/"!=t.substr(0,1)&&0!==t.length||e.splice(0,1),"/"==t.substr(t.length-1,1)&&e.splice(e.length-1,1),e},queryString:function(t){if(t!==e){var r=this.hash();return this.value(this.path()+(t?"?"+t:"")+(r?"#"+r:"")),this}var n=rt.split("?");return n.slice(1,n.length).join("?").split("#")[0]},parameter:function(r,n,a){var i,s;if(n!==e){var o=this.parameterNames();for(s=[],n=n===e||n===I?"":n.toString(),i=0;i<o.length;i++){var c=o[i],u=this.parameter(c);typeof u==j&&(u=[u]),c==r&&(u=n===I||""===n?[]:a?u.concat([n]):[n]);for(var d=0;d<u.length;d++)s.push(c+"="+u[d])}return t.inArray(r,o)==-1&&n!==I&&""!==n&&s.push(r+"="+n),this.queryString(s.join("&")),this}if(n=this.queryString()){var l=[];for(s=n.split("&"),i=0;i<s.length;i++){var p=s[i].split("=");p[0]==r&&l.push(p.slice(1).join("="))}if(0!==l.length)return 1!=l.length?l:l[0]}},parameterNames:function(){var e=this.queryString(),r=[];if(e&&e.indexOf("=")!=-1)for(var n=e.split("&"),a=0;a<n.length;a++){var i=n[a].split("=")[0];t.inArray(i,r)==-1&&r.push(i)}return r},hash:function(t){if(t!==e)return this.value(rt.split("#")[0]+(t?"#"+t:"")),this;var r=rt.split("#");return r.slice(1,r.length).join("#")}}}(),t.fn.address=function(e){return t(this).each(function(r){t(this).data("address")||t(this).on("click",function(r){if(r.shiftKey||r.ctrlKey||r.metaKey||2==r.which)return!0;var n=r.currentTarget;if(t(n).is("a")){r.preventDefault();var a=e?e.call(n):/address:/.test(t(n).attr("rel"))?t(n).attr("rel").split("address:")[1].split(" ")[0]:void 0===t.address.state()||/^\/?$/.test(t.address.state())?t(n).attr("href").replace(/^(#\!?|\.)/,""):t(n).attr("href").replace(new RegExp("^(.*"+t.address.state()+"|\\.)"),"");t.address.value(a)}}).on("submit",function(r){var n=r.currentTarget;if(t(n).is("form")){r.preventDefault();var a=t(n).attr("action"),i=e?e.call(n):(a.indexOf("?")!=-1?a.replace(/&$/,""):a+"?")+t(n).serialize();t.address.value(i)}}).data("address",!0)}),this}}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5hZGRyZXNzLmpzIl0sIm5hbWVzIjpbIiQiLCJhZGRyZXNzIiwiVU5ERUZJTkVEIiwiX2ZyYW1lIiwiX3RyaWdnZXIiLCJuYW1lIiwiZSIsImV4dGVuZCIsIkV2ZW50IiwicGFyYW1ldGVycyIsInBhcmFtZXRlck5hbWVzIiwiaSIsImwiLCJsZW5ndGgiLCJwYXJhbWV0ZXIiLCJ2YWx1ZSIsInBhdGgiLCJwYXRoTmFtZXMiLCJxdWVyeVN0cmluZyIsImNhbGwiLCJ0cmlnZ2VyIiwiX2FycmF5Iiwib2JqIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsIl9iaW5kIiwiZGF0YSIsImZuIiwiYmluZCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX3VuYmluZCIsInVuYmluZCIsIl9zdXBwb3J0c1N0YXRlIiwiX2giLCJwdXNoU3RhdGUiLCJfb3B0cyIsInN0YXRlIiwiX2hyZWZTdGF0ZSIsIl9sIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwiUmVnRXhwIiwic2VhcmNoIiwiX2hyZWZIYXNoIiwiX3JlIiwiaW5kZXgiLCJocmVmIiwiaW5kZXhPZiIsInN1YnN0ciIsIl9ocmVmIiwiX3dpbmRvdyIsInRvcCIsImRvY3VtZW50IiwidGl0bGUiLCJqUXVlcnkiLCJmcmFtZXMiLCJ3aW5kb3ciLCJfanMiLCJfc3RyaWN0IiwidG9TdHJpbmciLCJzdHJpY3QiLCJfY3NzaW50IiwiZWwiLCJwYXJzZUludCIsImNzcyIsIl9saXN0ZW4iLCJfc2lsZW50IiwiaGFzaCIsImRpZmYiLCJkZWNvZGVVUkkiLCJfdmFsdWUiLCJfbXNpZSIsIl92ZXJzaW9uIiwicmVsb2FkIiwiX2hhc2hjaGFuZ2UiLCJoaXN0b3J5IiwiX3N0IiwiX2h0bWwiLCJfdXBkYXRlIiwiRkFMU0UiLCJpbnRlcm5hbCIsIl90cmFjayIsIkNIQU5HRSIsImlzRGVmYXVsdFByZXZlbnRlZCIsIklOVEVSTkFMX0NIQU5HRSIsIkVYVEVSTkFMX0NIQU5HRSIsInRyYWNrZXIiLCJOVUxMIiwiaXNGdW5jdGlvbiIsIl90IiwidXJjaGluVHJhY2tlciIsInBhZ2VUcmFja2VyIiwiX3RyYWNrUGFnZXZpZXciLCJfZ2FxIiwicHVzaCIsImdhIiwic3JjIiwiX2QiLCJJRCIsImVuY29kZVVSSUNvbXBvbmVudCIsImRvbWFpbiIsImhvc3RuYW1lIiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiX29wdGlvbnMiLCJfdXJsIiwiX3FpIiwicGFyYW0iLCJwYXJhbXMiLCJzcGxpdCIsInRlc3QiLCJpc05hTiIsIl9sb2FkIiwiX2xvYWRlZCIsIlRSVUUiLCJ3cmFwIiwiYm9keSIsIndyYXBBbGwiLCJwYXJlbnQiLCJfd2Via2l0Iiwic3RhdHVzYmFyIiwidmlzaWJsZSIsImhlaWdodCIsIm1hcmdpbiIsInBhZGRpbmciLCJvdmVyZmxvdyIsImFwcGVuZFRvIiwidGV4dCIsImZyYW1lc2V0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjcmVhdGVFbGVtZW50IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiY29scyIsIm5vUmVzaXplIiwiZnJhbWVCb3JkZXIiLCJmcmFtZVNwYWNpbmciLCJzdHlsZSIsImRpc3BsYXkiLCJ3aWR0aCIsInRhYkluZGV4Iiwid2luIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkhBU0hfQ0hBTkdFIiwiYXR0YWNoRXZlbnQiLCJfc2kiLCJfcG9wc3RhdGUiLCJfdW5sb2FkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiX3VhTWF0Y2giLCJ1YSIsInRvTG93ZXJDYXNlIiwibWF0Y2giLCJleGVjIiwiYnJvd3NlciIsInZlcnNpb24iLCJfZGV0ZWN0QnJvd3NlciIsIm1hdGNoZWQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjaHJvbWUiLCJ3ZWJraXQiLCJzYWZhcmkiLCJTVFJJTkciLCJJTklUIiwiYXV0b1VwZGF0ZSIsIl9icm93c2VyIiwicGFyc2VGbG9hdCIsIm1zaWUiLCJzZXRJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJfYWdlbnQiLCJhdHRyIiwiX3RpdGxlIiwiX2p1c3RzdGFydCIsIl91cGRhdGluZyIsImRvY3VtZW50TW9kZSIsInBjIiwib25wcm9wZXJ0eWNoYW5nZSIsIm5hdmlnYXRpb25Nb2RlIiwicmVhZHlTdGF0ZSIsImludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInR5cGUiLCJ0aGlzIiwiaW5pdCIsImNvbmNhdCIsImNoYW5nZSIsImludGVybmFsQ2hhbmdlIiwiZXh0ZXJuYWxDaGFuZ2UiLCJiYXNlVVJMIiwidXJsIiwiaHJlZlN0YXRlIiwidXBkYXRlIiwicXMiLCJuYW1lcyIsInNwbGljZSIsImFyciIsImpvaW4iLCJhcHBlbmQiLCJuIiwidiIsImoiLCJpbkFycmF5IiwiciIsInAiLCJlYWNoIiwib24iLCJzaGlmdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwid2hpY2giLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiaXMiLCJwcmV2ZW50RGVmYXVsdCIsInVuZGVmaW5lZCIsImFjdGlvbiIsInNlcmlhbGl6ZSJdLCJtYXBwaW5ncyI6IkNBQ0EsU0FBV0EsR0FFUEEsRUFBRUMsUUFBVSxXQUVSLEdBNlBJQyxHQStCQUMsRUE1UkFDLEVBQVcsU0FBU0MsR0FDakIsR0FBSUMsR0FBSU4sRUFBRU8sT0FBT1AsRUFBRVEsTUFBTUgsR0FBTyxXQUczQixJQUFLLEdBRkRJLE1BQ0FDLEVBQWlCVixFQUFFQyxRQUFRUyxpQkFDdEJDLEVBQUksRUFBR0MsRUFBSUYsRUFBZUcsT0FBUUYsRUFBSUMsRUFBR0QsSUFDOUNGLEVBQVdDLEVBQWVDLElBQU1YLEVBQUVDLFFBQVFhLFVBQVVKLEVBQWVDLEdBRXZFLFFBQ0lJLE1BQU9mLEVBQUVDLFFBQVFjLFFBQ2pCQyxLQUFNaEIsRUFBRUMsUUFBUWUsT0FDaEJDLFVBQVdqQixFQUFFQyxRQUFRZ0IsWUFDckJQLGVBQWdCQSxFQUNoQkQsV0FBWUEsRUFDWlMsWUFBYWxCLEVBQUVDLFFBQVFpQixnQkFFNUJDLEtBQUtuQixFQUFFQyxTQUVWLE9BREFELEdBQUVBLEVBQUVDLFNBQVNtQixRQUFRZCxHQUNk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cmVzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBqUXVlcnkgQWRkcmVzcyB2JHt2ZXJzaW9ufSB8IChjKSAyMDA5LCAyMDEzIFJvc3Rpc2xhdiBIcmlzdG92IHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXG4oZnVuY3Rpb24gKCQpIHtcblxuICAgICQuYWRkcmVzcyA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIF90cmlnZ2VyID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgdmFyIGUgPSAkLmV4dGVuZCgkLkV2ZW50KG5hbWUpLCAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJzID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJOYW1lcyA9ICQuYWRkcmVzcy5wYXJhbWV0ZXJOYW1lcygpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHBhcmFtZXRlck5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyc1twYXJhbWV0ZXJOYW1lc1tpXV0gPSAkLmFkZHJlc3MucGFyYW1ldGVyKHBhcmFtZXRlck5hbWVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICQuYWRkcmVzcy52YWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJC5hZGRyZXNzLnBhdGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhOYW1lczogJC5hZGRyZXNzLnBhdGhOYW1lcygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyTmFtZXM6IHBhcmFtZXRlck5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyczogcGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5U3RyaW5nOiAkLmFkZHJlc3MucXVlcnlTdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pLmNhbGwoJC5hZGRyZXNzKSk7XG4gICAgICAgICAgICAgICAgJCgkLmFkZHJlc3MpLnRyaWdnZXIoZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2JpbmQgPSBmdW5jdGlvbih2YWx1ZSwgZGF0YSwgZm4pIHtcbiAgICAgICAgICAgICAgICAkKCkuYmluZC5hcHBseSgkKCQuYWRkcmVzcyksIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgICAgICAgICAgICAgIHJldHVybiAkLmFkZHJlc3M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3VuYmluZCA9IGZ1bmN0aW9uKHZhbHVlLCAgZm4pIHtcbiAgICAgICAgICAgICAgICAkKCkudW5iaW5kLmFwcGx5KCQoJC5hZGRyZXNzKSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICQuYWRkcmVzcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc3VwcG9ydHNTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoX2gucHVzaFN0YXRlICYmIF9vcHRzLnN0YXRlICE9PSBVTkRFRklORUQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9ocmVmU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCcvJyArIF9sLnBhdGhuYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChfb3B0cy5zdGF0ZSksICcnKSArIFxuICAgICAgICAgICAgICAgICAgICBfbC5zZWFyY2ggKyAoX2hyZWZIYXNoKCkgPyAnIycgKyBfaHJlZkhhc2goKSA6ICcnKSkucmVwbGFjZShfcmUsICcvJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2hyZWZIYXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gX2wuaHJlZi5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ICE9IC0xID8gX2wuaHJlZi5zdWJzdHIoaW5kZXggKyAxKSA6ICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9ocmVmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdXBwb3J0c1N0YXRlKCkgPyBfaHJlZlN0YXRlKCkgOiBfaHJlZkhhc2goKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfd2luZG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvcC5kb2N1bWVudCAhPT0gVU5ERUZJTkVEICYmIHRvcC5kb2N1bWVudC50aXRsZSAhPT0gVU5ERUZJTkVEICYmIHRvcC5qUXVlcnkgIT09IFVOREVGSU5FRCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5qUXVlcnkuYWRkcmVzcyAhPT0gVU5ERUZJTkVEICYmIHRvcC5qUXVlcnkuYWRkcmVzcy5mcmFtZXMoKSAhPT0gZmFsc2UgPyB0b3AgOiB3aW5kb3c7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX2pzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdqYXZhc2NyaXB0JztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfc3RyaWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChfb3B0cy5zdHJpY3QgJiYgdmFsdWUuc3Vic3RyKDAsIDEpICE9ICcvJyA/ICcvJyA6ICcnKSArIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9jc3NpbnQgPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZWwuY3NzKHZhbHVlKSwgMTApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9saXN0ZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV9zaWxlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBfaHJlZigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IGRlY29kZVVSSShfdmFsdWUpICE9IGRlY29kZVVSSShoYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbXNpZSAmJiBfdmVyc2lvbiA8IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9tc2llICYmICFfaGFzaGNoYW5nZSAmJiBfb3B0cy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdChfaHRtbCwgNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmFsdWUgPSBoYXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF91cGRhdGUoRkFMU0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF91cGRhdGUgPSBmdW5jdGlvbihpbnRlcm5hbCkge1xuICAgICAgICAgICAgICAgIF9zdChfdHJhY2ssIDEwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RyaWdnZXIoQ0hBTkdFKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXIoaW50ZXJuYWwgPyBJTlRFUk5BTF9DSEFOR0UgOiBFWFRFUk5BTF9DSEFOR0UpLmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF90cmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChfb3B0cy50cmFja2VyICE9PSAnbnVsbCcgJiYgX29wdHMudHJhY2tlciAhPT0gTlVMTCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSAkLmlzRnVuY3Rpb24oX29wdHMudHJhY2tlcikgPyBfb3B0cy50cmFja2VyIDogX3RbX29wdHMudHJhY2tlcl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IChfbC5wYXRobmFtZSArIF9sLnNlYXJjaCArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJC5hZGRyZXNzICYmICFfc3VwcG9ydHNTdGF0ZSgpID8gJC5hZGRyZXNzLnZhbHVlKCkgOiAnJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXC8vLCAnLycpLnJlcGxhY2UoL15cXC8kLywgJycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oX3QudXJjaGluVHJhY2tlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90LnVyY2hpblRyYWNrZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoX3QucGFnZVRyYWNrZXIgIT09IFVOREVGSU5FRCAmJiAkLmlzRnVuY3Rpb24oX3QucGFnZVRyYWNrZXIuX3RyYWNrUGFnZXZpZXcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIF90LnBhZ2VUcmFja2VyLl90cmFja1BhZ2V2aWV3KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF90Ll9nYXEgIT09IFVOREVGSU5FRCAmJiAkLmlzRnVuY3Rpb24oX3QuX2dhcS5wdXNoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdC5fZ2FxLnB1c2goWydfdHJhY2tQYWdldmlldycsIGRlY29kZVVSSSh2YWx1ZSldKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihfdC5nYSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3QuZ2EoJ3NlbmQnLCAncGFnZXZpZXcnLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9odG1sID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNyYyA9IF9qcygpICsgJzonICsgRkFMU0UgKyAnO2RvY3VtZW50Lm9wZW4oKTtkb2N1bWVudC53cml0ZWxuKFxcJzxodG1sPjxoZWFkPjx0aXRsZT4nICsgXG4gICAgICAgICAgICAgICAgICAgIF9kLnRpdGxlLnJlcGxhY2UoL1xcJy9nLCAnXFxcXFxcJycpICsgJzwvdGl0bGU+PHNjcmlwdD52YXIgJyArIElEICsgJyA9IFwiJyArIGVuY29kZVVSSUNvbXBvbmVudChfaHJlZigpKS5yZXBsYWNlKC9cXCcvZywgJ1xcXFxcXCcnKSArIFxuICAgICAgICAgICAgICAgICAgICAoX2QuZG9tYWluICE9IF9sLmhvc3RuYW1lID8gJ1wiO2RvY3VtZW50LmRvbWFpbj1cIicgKyBfZC5kb21haW4gOiAnJykgKyBcbiAgICAgICAgICAgICAgICAgICAgJ1wiOzwvJyArICdzY3JpcHQ+PC9oZWFkPjwvaHRtbD5cXCcpO2RvY3VtZW50LmNsb3NlKCk7JztcbiAgICAgICAgICAgICAgICBpZiAoX3ZlcnNpb24gPCA3KSB7XG4gICAgICAgICAgICAgICAgICAgIF9mcmFtZS5zcmMgPSBzcmM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2ZyYW1lLmNvbnRlbnRXaW5kb3cubG9jYXRpb24ucmVwbGFjZShzcmMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdXJsICYmIF9xaSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgcGFyYW0sIHBhcmFtcyA9IF91cmwuc3Vic3RyKF9xaSArIDEpLnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtID0gcGFyYW1zW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoL14oYXV0b1VwZGF0ZXxoaXN0b3J5fHN0cmljdHx3cmFwKSQvLnRlc3QocGFyYW1bMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29wdHNbcGFyYW1bMF1dID0gKGlzTmFOKHBhcmFtWzFdKSA/IC9eKHRydWV8eWVzKSQvaS50ZXN0KHBhcmFtWzFdKSA6IChwYXJzZUludChwYXJhbVsxXSwgMTApICE9PSAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoL14oc3RhdGV8dHJhY2tlcikkLy50ZXN0KHBhcmFtWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vcHRzW3BhcmFtWzBdXSA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF91cmwgPSBOVUxMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdmFsdWUgPSBfaHJlZigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfbG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkZWQgPSBUUlVFO1xuICAgICAgICAgICAgICAgICAgICBfb3B0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICAkKCdhW3JlbCo9XCJhZGRyZXNzOlwiXScpLmFkZHJlc3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9vcHRzLndyYXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib2R5ID0gJCgnYm9keScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXAgPSAkKCdib2R5ID4gKicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53cmFwQWxsKCc8ZGl2IHN0eWxlPVwicGFkZGluZzonICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX2Nzc2ludChib2R5LCAnbWFyZ2luVG9wJykgKyBfY3NzaW50KGJvZHksICdwYWRkaW5nVG9wJykpICsgJ3B4ICcgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfY3NzaW50KGJvZHksICdtYXJnaW5SaWdodCcpICsgX2Nzc2ludChib2R5LCAncGFkZGluZ1JpZ2h0JykpICsgJ3B4ICcgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfY3NzaW50KGJvZHksICdtYXJnaW5Cb3R0b20nKSArIF9jc3NpbnQoYm9keSwgJ3BhZGRpbmdCb3R0b20nKSkgKyAncHggJyArIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF9jc3NpbnQoYm9keSwgJ21hcmdpbkxlZnQnKSArIF9jc3NpbnQoYm9keSwgJ3BhZGRpbmdMZWZ0JykpICsgJ3B4O1wiIC8+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53cmFwKCc8ZGl2IGlkPVwiJyArIElEICsgJ1wiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7b3ZlcmZsb3c6YXV0bztwb3NpdGlvbjpyZWxhdGl2ZTsnICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoX3dlYmtpdCAmJiAhd2luZG93LnN0YXR1c2Jhci52aXNpYmxlID8gJ3Jlc2l6ZTpib3RoOycgOiAnJykgKyAnXCIgLz4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfd2Via2l0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiIC8+JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKCdoZWFkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoJyMnICsgSUQgKyAnOjotd2Via2l0LXJlc2l6ZXIgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOyB9Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF9tc2llICYmICFfaGFzaGNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lc2V0ID0gX2QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ZyYW1lc2V0JylbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUgPSBfZC5jcmVhdGVFbGVtZW50KChmcmFtZXNldCA/ICcnIDogJ2knKSArICdmcmFtZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2ZyYW1lLnNyYyA9IF9qcygpICsgJzonICsgRkFMU0U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZXNldC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZUVuZCcsIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVzZXRbZnJhbWVzZXQuY29scyA/ICdjb2xzJyA6ICdyb3dzJ10gKz0gJywwJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUubm9SZXNpemUgPSBUUlVFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mcmFtZS5mcmFtZUJvcmRlciA9IF9mcmFtZS5mcmFtZVNwYWNpbmcgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUuc3R5bGUud2lkdGggPSBfZnJhbWUuc3R5bGUuaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZC5ib2R5Lmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJCZWdpbicsIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChfZnJhbWUpLmJpbmQoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpbiA9IF9mcmFtZS5jb250ZW50V2luZG93O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmFsdWUgPSB3aW5bSURdICE9PSBVTkRFRklORUQgPyB3aW5bSURdIDogJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdmFsdWUgIT0gX2hyZWYoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZShGQUxTRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5oYXNoID0gX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9mcmFtZS5jb250ZW50V2luZG93W0lEXSA9PT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9zdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyKCdpbml0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdXBkYXRlKEZBTFNFKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX3N1cHBvcnRzU3RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChfbXNpZSAmJiBfdmVyc2lvbiA+IDcpIHx8ICghX21zaWUgJiYgX2hhc2hjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3QuYWRkRXZlbnRMaXN0ZW5lcihIQVNIX0NIQU5HRSwgX2xpc3RlbiwgRkFMU0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3QuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3QuYXR0YWNoRXZlbnQoJ29uJyArIEhBU0hfQ0hBTkdFLCBfbGlzdGVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zaShfbGlzdGVuLCA1MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdzdGF0ZScgaW4gd2luZG93Lmhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQod2luZG93KS50cmlnZ2VyKCdwb3BzdGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9wb3BzdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWNvZGVVUkkoX3ZhbHVlKSAhPSBkZWNvZGVVUkkoX2hyZWYoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlID0gX2hyZWYoKTtcbiAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZShGQUxTRSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF91bmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3QucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBfdC5yZW1vdmVFdmVudExpc3RlbmVyKEhBU0hfQ0hBTkdFLCBfbGlzdGVuLCBGQUxTRSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdC5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBfdC5kZXRhY2hFdmVudCgnb24nICsgSEFTSF9DSEFOR0UsIF9saXN0ZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdWFNYXRjaCA9IGZ1bmN0aW9uKHVhKSB7XG4gICAgICAgICAgICAgICAgdWEgPSB1YS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IC8oY2hyb21lKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgICAgICAvKHdlYmtpdClbIFxcL10oW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICAgICAgLyhvcGVyYSkoPzouKnZlcnNpb258KVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgICAgICAvKG1zaWUpIChbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuICAgICAgICAgICAgICAgICAgICB1YS5pbmRleE9mKCdjb21wYXRpYmxlJykgPCAwICYmIC8obW96aWxsYSkoPzouKj8gcnY6KFtcXHcuXSspfCkvLmV4ZWMoIHVhICkgfHxcbiAgICAgICAgICAgICAgICAgICAgW107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3NlcjogbWF0Y2hbIDEgXSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogbWF0Y2hbIDIgXSB8fCAnMCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9kZXRlY3RCcm93c2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJyb3dzZXIgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IF91YU1hdGNoKG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkLmJyb3dzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3NlclttYXRjaGVkLmJyb3dzZXJdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gbWF0Y2hlZC52ZXJzaW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5jaHJvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci53ZWJraXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnJvd3Nlci53ZWJraXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3Nlci5zYWZhcmkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBVTkRFRklORUQsXG4gICAgICAgICAgICBOVUxMID0gbnVsbCxcbiAgICAgICAgICAgIElEID0gJ2pRdWVyeUFkZHJlc3MnLFxuICAgICAgICAgICAgU1RSSU5HID0gJ3N0cmluZycsXG4gICAgICAgICAgICBIQVNIX0NIQU5HRSA9ICdoYXNoY2hhbmdlJyxcbiAgICAgICAgICAgIElOSVQgPSAnaW5pdCcsXG4gICAgICAgICAgICBDSEFOR0UgPSAnY2hhbmdlJyxcbiAgICAgICAgICAgIElOVEVSTkFMX0NIQU5HRSA9ICdpbnRlcm5hbENoYW5nZScsXG4gICAgICAgICAgICBFWFRFUk5BTF9DSEFOR0UgPSAnZXh0ZXJuYWxDaGFuZ2UnLFxuICAgICAgICAgICAgVFJVRSA9IHRydWUsXG4gICAgICAgICAgICBGQUxTRSA9IGZhbHNlLFxuICAgICAgICAgICAgX29wdHMgPSB7XG4gICAgICAgICAgICAgICAgYXV0b1VwZGF0ZTogVFJVRSwgXG4gICAgICAgICAgICAgICAgaGlzdG9yeTogVFJVRSwgXG4gICAgICAgICAgICAgICAgc3RyaWN0OiBUUlVFLFxuICAgICAgICAgICAgICAgIGZyYW1lczogVFJVRSxcbiAgICAgICAgICAgICAgICB3cmFwOiBGQUxTRVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9icm93c2VyID0gX2RldGVjdEJyb3dzZXIoKSxcbiAgICAgICAgICAgIF92ZXJzaW9uID0gcGFyc2VGbG9hdChfYnJvd3Nlci52ZXJzaW9uKSxcbiAgICAgICAgICAgIF93ZWJraXQgPSBfYnJvd3Nlci53ZWJraXQgfHwgX2Jyb3dzZXIuc2FmYXJpLFxuICAgICAgICAgICAgX21zaWUgPSBfYnJvd3Nlci5tc2llLFxuICAgICAgICAgICAgX3QgPSBfd2luZG93KCksXG4gICAgICAgICAgICBfZCA9IF90LmRvY3VtZW50LFxuICAgICAgICAgICAgX2ggPSBfdC5oaXN0b3J5LCBcbiAgICAgICAgICAgIF9sID0gX3QubG9jYXRpb24sXG4gICAgICAgICAgICBfc2kgPSBzZXRJbnRlcnZhbCxcbiAgICAgICAgICAgIF9zdCA9IHNldFRpbWVvdXQsXG4gICAgICAgICAgICBfcmUgPSAvXFwvezIsOX0vZyxcbiAgICAgICAgICAgIF9hZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICBfaGFzaGNoYW5nZSA9ICdvbicgKyBIQVNIX0NIQU5HRSBpbiBfdCxcbiAgICAgICAgICAgIF9mcmFtZSxcbiAgICAgICAgICAgIF9mb3JtLFxuICAgICAgICAgICAgX3VybCA9ICQoJ3NjcmlwdDpsYXN0JykuYXR0cignc3JjJyksXG4gICAgICAgICAgICBfcWkgPSBfdXJsID8gX3VybC5pbmRleE9mKCc/JykgOiAtMSxcbiAgICAgICAgICAgIF90aXRsZSA9IF9kLnRpdGxlLCBcbiAgICAgICAgICAgIF9zaWxlbnQgPSBGQUxTRSxcbiAgICAgICAgICAgIF9sb2FkZWQgPSBGQUxTRSxcbiAgICAgICAgICAgIF9qdXN0c3RhcnQgPSBUUlVFLFxuICAgICAgICAgICAgX3VwZGF0aW5nID0gRkFMU0UsXG4gICAgICAgICAgICBfbGlzdGVuZXJzID0ge30sIFxuICAgICAgICAgICAgX3ZhbHVlID0gX2hyZWYoKTtcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoX21zaWUpIHtcbiAgICAgICAgICAgIF92ZXJzaW9uID0gcGFyc2VGbG9hdChfYWdlbnQuc3Vic3RyKF9hZ2VudC5pbmRleE9mKCdNU0lFJykgKyA0KSk7XG4gICAgICAgICAgICBpZiAoX2QuZG9jdW1lbnRNb2RlICYmIF9kLmRvY3VtZW50TW9kZSAhPSBfdmVyc2lvbikge1xuICAgICAgICAgICAgICAgIF92ZXJzaW9uID0gX2QuZG9jdW1lbnRNb2RlICE9IDggPyA3IDogODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYyA9IF9kLm9ucHJvcGVydHljaGFuZ2U7XG4gICAgICAgICAgICBfZC5vbnByb3BlcnR5Y2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHBjLmNhbGwoX2QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX2QudGl0bGUgIT0gX3RpdGxlICYmIF9kLnRpdGxlLmluZGV4T2YoJyMnICsgX2hyZWYoKSkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgX2QudGl0bGUgPSBfdGl0bGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKF9oLm5hdmlnYXRpb25Nb2RlKSB7XG4gICAgICAgICAgICBfaC5uYXZpZ2F0aW9uTW9kZSA9ICdjb21wYXRpYmxlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoJC5hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9vcHRpb25zKCk7XG4gICAgICAgICAgICAkKF9sb2FkKTtcbiAgICAgICAgfVxuICAgICAgICAkKHdpbmRvdykuYmluZCgncG9wc3RhdGUnLCBfcG9wc3RhdGUpLmJpbmQoJ3VubG9hZCcsIF91bmxvYWQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiaW5kOiBmdW5jdGlvbih0eXBlLCBkYXRhLCBmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYmluZC5hcHBseSh0aGlzLCBfYXJyYXkoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5iaW5kOiBmdW5jdGlvbih0eXBlLCBmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdW5iaW5kLmFwcGx5KHRoaXMsIF9hcnJheShhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbml0OiBmdW5jdGlvbihkYXRhLCBmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYmluZC5hcHBseSh0aGlzLCBbSU5JVF0uY29uY2F0KF9hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbihkYXRhLCBmbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYmluZC5hcHBseSh0aGlzLCBbQ0hBTkdFXS5jb25jYXQoX2FycmF5KGFyZ3VtZW50cykpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbnRlcm5hbENoYW5nZTogZnVuY3Rpb24oZGF0YSwgZm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2JpbmQuYXBwbHkodGhpcywgW0lOVEVSTkFMX0NIQU5HRV0uY29uY2F0KF9hcnJheShhcmd1bWVudHMpKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXh0ZXJuYWxDaGFuZ2U6IGZ1bmN0aW9uKGRhdGEsIGZuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9iaW5kLmFwcGx5KHRoaXMsIFtFWFRFUk5BTF9DSEFOR0VdLmNvbmNhdChfYXJyYXkoYXJndW1lbnRzKSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJhc2VVUkw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBfbC5ocmVmO1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZignIycpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5zdWJzdHIoMCwgdXJsLmluZGV4T2YoJyMnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgvXFwvJC8udGVzdCh1cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHVybC5zdWJzdHIoMCwgdXJsLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1dG9VcGRhdGU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgX29wdHMuYXV0b1VwZGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9vcHRzLmF1dG9VcGRhdGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGlzdG9yeTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICBfb3B0cy5oaXN0b3J5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX29wdHMuaGlzdG9yeTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICBfb3B0cy5zdGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZlN0YXRlID0gX2hyZWZTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoX29wdHMuc3RhdGUgIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9oLnB1c2hTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChocmVmU3RhdGUuc3Vic3RyKDAsIDMpID09ICcvIy8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnJlcGxhY2UoX29wdHMuc3RhdGUucmVwbGFjZSgvXlxcLyQvLCAnJykgKyBocmVmU3RhdGUuc3Vic3RyKDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhyZWZTdGF0ZSAhPSAnLycgJiYgaHJlZlN0YXRlLnJlcGxhY2UoL15cXC8jLywgJycpICE9IF9ocmVmSGFzaCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5yZXBsYWNlKF9vcHRzLnN0YXRlLnJlcGxhY2UoL15cXC8kLywgJycpICsgJy8jJyArIGhyZWZTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfb3B0cy5zdGF0ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcmFtZXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgX29wdHMuZnJhbWVzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF90ID0gX3dpbmRvdygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9vcHRzLmZyYW1lcztcbiAgICAgICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgICBzdHJpY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgX29wdHMuc3RyaWN0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX29wdHMuc3RyaWN0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRyYWNrZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgX29wdHMudHJhY2tlciA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9vcHRzLnRyYWNrZXI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd3JhcDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICBfb3B0cy53cmFwID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX29wdHMud3JhcDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF91cGRhdGluZyA9IFRSVUU7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZShfdmFsdWUpO1xuICAgICAgICAgICAgICAgIF91cGRhdGluZyA9IEZBTFNFO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aXRsZSA9IF9kLnRpdGxlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2p1c3RzdGFydCAmJiBfZnJhbWUgJiYgX2ZyYW1lLmNvbnRlbnRXaW5kb3cgJiYgX2ZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC50aXRsZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9qdXN0c3RhcnQgPSBGQUxTRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9kLnRpdGxlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX3N0cmljdCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF92YWx1ZSA9PSB2YWx1ZSAmJiAhX3VwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfb3B0cy5hdXRvVXBkYXRlIHx8IF91cGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF91cGRhdGUoVFJVRSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfc3VwcG9ydHNTdGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2hbX29wdHMuaGlzdG9yeSA/ICdwdXNoU3RhdGUnIDogJ3JlcGxhY2VTdGF0ZSddKHt9LCAnJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb3B0cy5zdGF0ZS5yZXBsYWNlKC9cXC8kLywgJycpICsgKF92YWx1ZSA9PT0gJycgPyAnLycgOiBfdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NpbGVudCA9IFRSVUU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF93ZWJraXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9vcHRzLmhpc3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmhhc2ggPSAnIycgKyBfdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5yZXBsYWNlKCcjJyArIF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF92YWx1ZSAhPSBfaHJlZigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfb3B0cy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5oYXNoID0gJyMnICsgX3ZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wucmVwbGFjZSgnIycgKyBfdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoX21zaWUgJiYgIV9oYXNoY2hhbmdlKSAmJiBfb3B0cy5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdChfaHRtbCwgNTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3dlYmtpdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3QoZnVuY3Rpb24oKXsgX3NpbGVudCA9IEZBTFNFOyB9LCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2lsZW50ID0gRkFMU0U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3N0cmljdChfdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhdGg6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHFzID0gdGhpcy5xdWVyeVN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzaCA9IHRoaXMuaGFzaCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlKHZhbHVlICsgKHFzID8gJz8nICsgcXMgOiAnJykgKyAoaGFzaCA/ICcjJyArIGhhc2ggOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdHJpY3QoX3ZhbHVlKS5zcGxpdCgnIycpWzBdLnNwbGl0KCc/JylbMF07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aE5hbWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMucGF0aCgpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lcyA9IHBhdGgucmVwbGFjZShfcmUsICcvJykuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5zdWJzdHIoMCwgMSkgPT0gJy8nIHx8IHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhdGguc3Vic3RyKHBhdGgubGVuZ3RoIC0gMSwgMSkgPT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWVzLnNwbGljZShuYW1lcy5sZW5ndGggLSAxLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUodGhpcy5wYXRoKCkgKyAodmFsdWUgPyAnPycgKyB2YWx1ZSA6ICcnKSArIChoYXNoID8gJyMnICsgaGFzaCA6ICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgYXJyID0gX3ZhbHVlLnNwbGl0KCc/Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyci5zbGljZSgxLCBhcnIubGVuZ3RoKS5qb2luKCc/Jykuc3BsaXQoJyMnKVswXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXJhbWV0ZXI6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBhcHBlbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgcGFyYW1zO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IHRoaXMucGFyYW1ldGVyTmFtZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPT09IFVOREVGSU5FRCB8fCB2YWx1ZSA9PT0gTlVMTCA/ICcnIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5hbWVzW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLnBhcmFtZXRlcihuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PSBTVFJJTkcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gW3ZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSAodmFsdWUgPT09IE5VTEwgfHwgdmFsdWUgPT09ICcnKSA/IFtdIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhcHBlbmQgPyB2LmNvbmNhdChbdmFsdWVdKSA6IFt2YWx1ZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gobiArICc9JyArIHZbal0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgbmFtZXMpID09IC0xICYmIHZhbHVlICE9PSBOVUxMICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2gobmFtZSArICc9JyArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U3RyaW5nKHBhcmFtcy5qb2luKCcmJykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnF1ZXJ5U3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gW107XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHZhbHVlLnNwbGl0KCcmJyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcGFyYW1zW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFswXSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKHAuc2xpY2UoMSkuam9pbignPScpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoci5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmxlbmd0aCAhPSAxID8gciA6IHJbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyYW1ldGVyTmFtZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBxcyA9IHRoaXMucXVlcnlTdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocXMgJiYgcXMuaW5kZXhPZignPScpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBxcy5zcGxpdCgnJicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBwYXJhbXNbaV0uc3BsaXQoJz0nKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLmluQXJyYXkobmFtZSwgbmFtZXMpID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzaDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlKF92YWx1ZS5zcGxpdCgnIycpWzBdICsgKHZhbHVlID8gJyMnICsgdmFsdWUgOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IF92YWx1ZS5zcGxpdCgnIycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnIuc2xpY2UoMSwgYXJyLmxlbmd0aCkuam9pbignIycpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KSgpO1xuICAgIFxuICAgICQuZm4uYWRkcmVzcyA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICQodGhpcykuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgaWYgKCEkKHRoaXMpLmRhdGEoJ2FkZHJlc3MnKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUud2hpY2ggPT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGFyZ2V0KS5pcygnYScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBmbiA/IGZuLmNhbGwodGFyZ2V0KSA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9hZGRyZXNzOi8udGVzdCgkKHRhcmdldCkuYXR0cigncmVsJykpID8gJCh0YXJnZXQpLmF0dHIoJ3JlbCcpLnNwbGl0KCdhZGRyZXNzOicpWzFdLnNwbGl0KCcgJylbMF0gOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFkZHJlc3Muc3RhdGUoKSAhPT0gdW5kZWZpbmVkICYmICEvXlxcLz8kLy50ZXN0KCQuYWRkcmVzcy5zdGF0ZSgpKSA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0YXJnZXQpLmF0dHIoJ2hyZWYnKS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14oLionICsgJC5hZGRyZXNzLnN0YXRlKCkgKyAnfFxcXFwuKScpLCAnJykgOiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGFyZ2V0KS5hdHRyKCdocmVmJykucmVwbGFjZSgvXigjXFwhP3xcXC4pLywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5hZGRyZXNzLnZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLm9uKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRhcmdldCkuaXMoJ2Zvcm0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9ICQodGFyZ2V0KS5hdHRyKCdhY3Rpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGZuID8gZm4uY2FsbCh0YXJnZXQpIDogKGFjdGlvbi5pbmRleE9mKCc/JykgIT0gLTEgPyBhY3Rpb24ucmVwbGFjZSgvJiQvLCAnJykgOiBhY3Rpb24gKyAnPycpICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGFyZ2V0KS5zZXJpYWxpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWRkcmVzcy52YWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5kYXRhKCdhZGRyZXNzJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFxufSkoalF1ZXJ5KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
